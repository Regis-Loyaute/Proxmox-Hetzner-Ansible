- hosts: hetzner_servers
  gather_facts: no
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
  become: yes

  tasks:
    - name: Copy the installimage configuration file to the server
      ansible.builtin.copy:
      #change source to wget from Github repo
        src: /home/rloyaute/Proxmox-Hetzner-Ansible/configs/proxmox_installimage_config
        dest: /root/proxmox_installimage_config

    - name: Execute installimage with the configuration file and check for success
      ansible.builtin.shell: /root/.oldroot/nfs/install/installimage -a -c /root/proxmox_installimage_config
      register: installimage_result
      ignore_errors: yes

    - name: Print installimage output if failed
      ansible.builtin.debug:
        msg: |
          Installimage stdout: {{ installimage_result.stdout }}
          Installimage stderr: {{ installimage_result.stderr }}
      when: installimage_result.rc != 0

    - name: Fail the playbook if installimage did not complete successfully
      ansible.builtin.fail:
        msg: "The installimage script failed. Please check the output for details."
      when: installimage_result.rc != 0

    - name: Remove servers from known_hosts on the Ansible host
      ansible.builtin.shell:
        cmd: ssh-keygen -f "/root/.ssh/known_hosts" -R "{{ inventory_hostname }}"
      delegate_to: localhost

    - name: Reboot the server after installimage
      ansible.builtin.reboot:
        reboot_timeout: 600 # Wait up to 10 minutes for reboot to complete
        msg: "Rebooting after successful installimage execution"
        pre_reboot_delay: 0 # No delay before reboot
        post_reboot_delay: 30 # Wait 30 seconds after reboot before continuing with tasks
        test_command: "uptime" # Command to run for checking if the server is back up
      when: installimage_result.rc == 0 # Only reboot if installimage was successful