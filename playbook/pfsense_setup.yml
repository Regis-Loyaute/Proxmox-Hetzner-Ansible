---
- hosts: hetzner_servers
  gather_facts: no
  become: yes
  vars:
    pfsense_iso_url: "https://frafiles.pfsense.org/mirror/downloads/pfSense-CE-2.7.2-RELEASE-amd64.iso.gz"
    iso_directory: "/var/lib/vz/template/iso"
    pfsense_iso: "pfSense-CE-2.7.2-RELEASE-amd64.iso"
    vm_id: 100
    vm_name: "pfsense"
    storage_location: "local"  # Ensure this matches your Proxmox storage configuration
    vm_cpu: 2
    vm_ram: 2048  # in MB
    vm_disk_size: "16"  # In GB
    network_bridges: ["vmbr1", "vmbr2"]
    iso_storage: "local"  # Adjust based on where your ISOs are stored

  tasks:
    - name: Ensure pfSense ISO directory exists
      ansible.builtin.file:
        path: "{{ iso_directory }}"
        state: directory

    - name: Check if pfSense ISO is already unzipped
      ansible.builtin.stat:
        path: "{{ iso_directory }}/{{ pfsense_iso }}"
      register: pfsense_iso_stat

    - name: Download pfSense ISO if not exists
      ansible.builtin.get_url:
        url: "{{ pfsense_iso_url }}"
        dest: "{{ iso_directory }}/{{ pfsense_iso }}.gz"
        mode: '0644'
      register: download_result
      until: download_result is succeeded
      retries: 3
      delay: 5
      when: not pfsense_iso_stat.stat.exists

    - name: Unzip pfSense ISO if not already done
      ansible.builtin.shell:
        cmd: gunzip -k "{{ iso_directory }}/{{ pfsense_iso }}.gz"
      args:
        creates: "{{ iso_directory }}/{{ pfsense_iso }}"
      when: download_result is changed or not pfsense_iso_stat.stat.exists

    - name: Create the pfSense VM
      ansible.builtin.shell:
        cmd: >
          qm create {{ vm_id }} --name {{ vm_name }}
          --memory {{ vm_ram }} --net0 virtio,bridge={{ network_bridges[0] }}
          --net1 virtio,bridge={{ network_bridges[1] }} --cores {{ vm_cpu }}
          --ostype l26 --ide2 {{ iso_storage }}:iso/{{ pfsense_iso }},media=cdrom
          --scsihw virtio-scsi-single
          --scsi0 {{ storage_location }}:{{ vm_disk_size }}
      args:
        creates: "/etc/pve/nodes/pve/qemu-server/{{ vm_id }}.conf"

